

wget https://dl.influxdata.com/influxdb/releases/influxdb-0.13.0.x86_64.rpm
sudo yum localinstall influxdb-0.13.0.x86_64.rpm

wget https://dl.influxdata.com/influxdb/releases/influxdb_0.13.0_amd64.deb
sudo dpkg -i influxdb_0.13.0_amd64.deb

sudo service influxdb start

./influxd

usr/bin/influx

http://IP:8083



# 概念
  database
#     数据库
  measurement
#     数据库中的表
  points
#     表里面的一行数据
#     时间戳 time
#       自动生成
#       主索引
#     数据 field
#     标签 tags
  series
#     表里面的数据，可以在图表上画成几条线
#     通过tags排列组合算出来
    show series from cpu


# 操作方式：
    # 客户端命令行方式
    # HTTP API接口
    # 各语言API库
 
show databases
create database test
drop database test
use xk_name         x

SHOW MEASUREMENTS

insert disk_free,hostname=server01 value=442221834240i 1435362189575692182   x
# disk_free 就是表名，
# hostname是索引，
# value=xx是记录值，记录值可以有多个，最后是指定的时间

select * from disk_free 

# drop measurement disk_free

show measurements

insert disk_free,hostname=server01 value=442221834240i 1435362189575692182
select * from disk_free

# 时序数据库，没有提供修改和删除数据的方法

# 表里面的数据，可以在图表上画成几条线
show series from mem


# HTTP API操作数据库
curl -POST http://localhost:8086/query --data-urlencode "q=CREATE DATABASE mydb"
curl -POST http://localhost:8086/query --data-urlencode "q=DROP DATABASE mydb"


curl -i -XPOST 'http://localhost:8086/write?db=mydb' --data-binary 'cpu_load_short,host=server01,region=us-west value=0.64 1434055562000000000'
# db=mydb是指使用mydb这个数据库
# --data-binary后面是需插入数据
# cpu_load_short是表名（measurement），tag字段是host和region，值分别为：server01和us-west
# field key字段是value，值为0.64
# 时间戳（timestamp）指定为1434055562000000000


curl -i -XPOST 'http://localhost:8086/write?db=mydb' --data-binary 'cpu_load_short,host=server02 value=0.67 1422568543702900257
cpu_load_short,host=server02,region=us-west value=0.55 1422568543702900257
cpu_load_short,direction=in,host=server01,region=us-west value=2.0 1422568543702900257'
# 第一条指定tag为host，值为server02，
# 第二条指定tag为host和region，值分别为server02和us-west，
# 第三条指定tag为direction，host，region，值分别为：in，server01，us-west

# 2xx：204代表no content，200代表InfluxDB可以接收请求但是没有完成请求。一般会在body体中带有出错信息
# 4xx：InfluxDB不能解析请求
# 5xx：系统出现错

curl -GET 'http://localhost:8086/query?pretty=true' --data-urlencode "db=mydb" --data-urlencode "q=SELECT value FROM cpu_load_short WHERE region='us-west'"

curl -G 'http://localhost:8086/query?pretty=true' --data-urlencode "db=mydb" --data-urlencode "q=SELECT value FROM cpu_load_short WHERE region='us-west';
SELECT count(value) FROM cpu_load_short WHERE region='us-west'"

# 多条语句之间要用分号“；”分隔


curl -G 'http://localhost:8086/query' --data-urlencode "db=mydb" --data-urlencode "epoch=s" --data-urlencode "q=SELECT value FROM cpu_load_short WHERE region='us-west'"
# 获取到以秒为单位的时间数据


# 格式化输出
  --data-urlencode "epoch=s"
  # epoch=[h,m,s,ms,u,ns]
  --data-urlencode "chunk_size=200"


# 数据保留策略
#   Retention Policies
#   一个数据库可以有多个保留策略
#   每个策略必须是独一无二的
  SHOW RETENTION POLICIES ON mydb

# default    0        168h0m0s        1        true
    # name--名称，此示例名称为 default
    # duration--持续时间，0代表无限制
    # shardGroupDuration--shardGroup的存储时间

# 新建策略
CREATE RETENTION POLICY "2_hours" ON "mydb" DURATION 2h REPLICATION 1 DEFAULT
SHOW RETENTION POLICIES ON mydb


select * from "default".cpu limit 2

ALTER RETENTION POLICY "2_hours" ON "mydb" DURATION 4h DEFAULT
show retention POLICIES on mydb


drop retention POLICY "2_hours" ON "mydb"
show retention POLICIES on mydb

# POLICY在使用是应该大写

 CREATE CONTINUOUS QUERY cq_30m ON mydb BEGIN SELECT mean(used) INTO mem_used_30m FROM mem GROUP BY time(30m) END
SHOW CONTINUOUS QUERIES

# 新建了一个名为 cq_30m 的连续查询
# 每三十分钟取一个used字段的平均值，加入 mem_used_30m 表中

DROP CONTINUOUS QUERY <cq_name> ON <database_name>




# 聚合函数
SELECT COUNT(water_level) FROM k8s

SELECT COUNT(water_level) FROM k8s WHERE time >= '2015-08-18T00:00:00Z' AND time < '2015-09-18T17:00:00Z' GROUP BY time(4d)

SELECT DISTINCT("level description") FROM k8s
# 个字段（field）的唯一值

SELECT MEAN(water_level) FROM k8s
# 算术平均值

SELECT MEDIAN(water_level) from k8s
# 中位数

SELECT SPREAD(water_level) FROM k8s
# 极大极小之差

SELECT SUM(water_level) FROM k8s





# 连续查询语法
CREATE CONTINUOUS QUERY vampires_1 ON mydb RESAMPLE FOR 60m BEGIN SELECT count(dracula) INTO vampire_populations_1 FROM raw_vampires GROUP BY time(30m) END

# 将1小时的数据执行连续查询
# 每次执行时，会将now()到now()-30m和now()-30m到now()-60m分别做连续查询


CREATE CONTINUOUS QUERY vampires ON mydb RESAMPLE EVERY 15m BEGIN SELECT count(dracula) INTO vampire_populations FROM raw_vampires GROUP BY time(30m) END

# 连续查询会每隔15m执行一次


CREATE CONTINUOUS QUERY vampires_2 ON mydb RESAMPLE EVERY 15m FOR 60m BEGIN SELECT count(dracula) INTO vampire_populations_2 FROM raw_vampires GROUP BY time(30m) END
# 每15m执行一次，每次执行的范围为60m


# 原理
# https://www.linuxdaxue.com/influxdb-continuous-queries-senior-knowlage.html
